vec3 RotateY(vec3 _vDir, float _fAngle)
{
  return vec3(_vDir.x * cos(_fAngle) + _vDir.z * sin(_fAngle), _vDir.y, _vDir.z * cos(_fAngle) - _vDir.x * sin(_fAngle));
}

vec3 RotateX(vec3 _vDir, float _fAngle)
{
  return vec3(_vDir.y * cos(_fAngle) + _vDir.z * sin(_fAngle), _vDir.x, _vDir.z * cos(_fAngle) - _vDir.y * sin(_fAngle));
}

float Distance(vec3 _vPos)
{
  return 0.0f;
}

void main(void)
{
  vec2 v    = -1.0 + 2.0 * gl_FragCoord.xy / resolution.xy;
  vec3 vDir = normalize(RotateY(RotateY(vec3(v.y * fov, v.x * fov * ratio, 1.0), -pitch).yxz, heading));
  vec3 vPos = position;

  vec3  vRGB = (0.0, 0.0, 0.0), vTest;
  float fT, fStep;

  for(fT = tmin; fT < tmax; fT += fStep)
  {
    vTest = vPos + fT * vDir;
    fStep = Distance(vTest);
    
    if(fStep < 0.01)
    {
      break;
    }
  }

  gl_FragColor = vec4(vRGB, 1.0);
}
